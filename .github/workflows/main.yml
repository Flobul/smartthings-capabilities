name: "Generate capabilities"
on:
  workflow_dispatch:
  schedule:
    - cron: '13 05 */7 * *'

jobs:
  build:
    name: "Generate capabilities, presentation, and translations"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: "Checkout files"
        uses: actions/checkout@v3

      - name: "Setup smartthings-cli"
        run: |
          wget "https://github.com/SmartThingsCommunity/smartthings-cli/releases/download/%40smartthings%2Fcli%401.8.2/smartthings-linux-x64.tar.gz"
          tar -xvf smartthings-linux-x64.tar.gz

      - name: "Set up environment variables"
        run: |
          SMARTTHINGS_TOKEN=$(echo ${{ secrets.SMARTTHINGS_TOKENS }} | head -n 1)
          echo "SMARTTHINGS_TOKEN=$SMARTTHINGS_TOKEN" >> $GITHUB_ENV

      - name: "Download smartthings capabilities"
        run: ./smartthings capabilities -s -j --token "${{ env.SMARTTHINGS_TOKEN }}" -o capabilities.json

      - name: "Process capabilities"
        run: |
          mkdir -p json
          count=0

          process_capability() {
            local id=$1
            local version=$2
            echo "Processing $id version $version"
            ./smartthings capabilities $id -s -j --token "${{ env.SMARTTHINGS_TOKEN }}" -o json/$id.json || true
            ./smartthings capabilities:presentation $id $version -j --token "${{ env.SMARTTHINGS_TOKEN }}" -o json/${id}Presentation.json || true
            ./smartthings capabilities:translations $id $version fr -j --token "${{ env.SMARTTHINGS_TOKEN }}" -o json/$id.i18n.fr.json || true
            ./smartthings capabilities:translations $id $version en -j --token "${{ env.SMARTTHINGS_TOKEN }}" -o json/$id.i18n.en.json || true
          }

          jq -c '.[]' capabilities.json | while read capability; do
            id=$(echo $capability | jq -r '.id')
            version=$(echo $capability | jq -r '.version')
            process_capability $id $version
            count=$((count+1))
          done

          if [ -f extra_capabilities_fix.json ]; then
            jq -c '.[]' extra_capabilities_fix.json | while read capa; do
              id=$(echo $capa | jq -r '.id')
              version=$(echo $capa | jq -r '.version')
              process_capability $id $version
              count=$((count+1))
            done
          fi

      - name: "Generate README.md"
        run: |
          PRINT="## SmartThings Capabilities\n"
          PRINT+="#### Last Update: "$(date -I)"\n"
          PRINT+="#### Edited by Flobul for Jeedom solution\n\n"
          PRINT+="* [SmartThings Reference](https://smartthings.developer.samsung.com/docs/api-ref/capabilities.html)\n"
          PRINT+="* [SmartThings API](https://smartthings.developer.samsung.com/docs/api-ref/st-api.html#tag/capabilities)\n"
          PRINT+="* [SmartThings CLI](https://github.com/SmartThingsCommunity/smartthings-cli)\n"
          PRINT+="* [Create Personal Access Token](https://account.smartthings.com/tokens)\n"
          PRINT+="* [Plugin Documentation](https://flobul-domotique.fr/documentation-du-plugin-smartthings-pour-jeedom/)\n"
          PRINT+="* [Plugin Jeedom Market](https://market.jeedom.com/index.php?v=d&p=market_display&id=4099)\n"
          PRINT+="| Capability | Version | Status | Capability Presentation | Translation i18n |\n"
          PRINT+="| ---- | ---- | ---- | ---- | ---- |\n\n"

          for file in json/*.json; do
            if [[ $file == *i18n* || $file == *Presentation.json ]]; then
              continue
            fi

            json=$(cat "$file" | sed 's/\\//g')
            name=$(echo "$json" | jq -r '.name')
            id=$(echo "$json" | jq -r '.id')
            statuses=$(echo "$json" | jq -r '.status')
            versions=$(echo "$json" | jq -r '.version')

            presentation=""
            i18n=""
            [ -f "json/${id}Presentation.json" ] && presentation="[json](./json/${id}Presentation.json)"
            [ -f "json/${id}.i18n.fr.json" ] && i18n="[json](./json/${id}.i18n.fr.json)"

            PRINT+="| [$name](./json/$id.json) | $versions | $statuses | $presentation | $i18n |\n"
          done

          echo -e "$PRINT" > README.md

      - name: "Set up git config"
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "flobul.jeedom@gmail.com"

      - name: "Create Pull Requests"
        run: |
          git fetch origin
          git checkout master
          git pull origin master
          create_pr() {
            local file=$1
            local branch_name="update-$(basename "$file")"
            echo "Processing PR for $file"
          
            # Vérifier si une PR existe déjà pour ce fichier
            existing_pr=$(gh pr list --state open --head "$branch_name" --json number,url -q '.[0].number')
          
            if [ ! -z "$existing_pr" ]; then
              echo "Found existing PR #$existing_pr for $file"
          
              # Sauvegarder toutes les modifications locales pour éviter les conflits
              git stash push --include-untracked -m "Temporary stash before switching to $branch_name"
          
              # Récupérer la branche existante
              git fetch origin "$branch_name"
              git checkout -B "$branch_name" "origin/$branch_name"
          
              # Restaurer les modifications sauvegardées
              git stash pop || echo "No stash to pop, continuing"
          
              # Ajouter les nouvelles modifications
              git add "$file"
          
              if ! git diff --cached --quiet; then
                # Commit les nouvelles modifications
                git commit -m "Update $file"
                diff=$(git diff HEAD~1 -- "$file")
          
                # Push les modifications
                git push origin "$branch_name" --force-with-lease || git push origin "$branch_name" --force
          
                # Mettre à jour la PR existante
                gh pr edit "$existing_pr" --body "$(echo -e "Updated changes for $file\n\n\`\`\`diff\n$diff\n\`\`\`")"
                echo "Updated existing PR #$existing_pr"
              else
                echo "No new changes for existing PR #$existing_pr"
              fi
            else
              # Sauvegarder toutes les modifications locales pour éviter les conflits
              git stash push --include-untracked -m "Temporary stash before creating new branch $branch_name"
          
              # Créer une nouvelle branche
              git checkout -b "$branch_name"
          
              # Restaurer les modifications sauvegardées
              git stash pop || echo "No stash to pop, continuing"
          
              # Ajouter le fichier
              git add "$file"
          
              if ! git diff --cached --quiet; then
                # Nouveau commit
                git commit -m "Update $file"
          
                # Générer le diff
                if git rev-parse HEAD~1 >/dev/null 2>&1; then
                  diff=$(git diff HEAD~1 -- "$file")
                else
                  diff=$(git diff --no-index /dev/null "$file" 2>/dev/null || echo "New file added")
                fi
          
                # Push et création de la PR
                git push origin "$branch_name" --force-with-lease || git push origin "$branch_name" --force
          
                gh pr create --title "Update $file" \
                             --body "$(echo -e "Automated update for $file\n\n\`\`\`diff\n$diff\n\`\`\`")" \
                             --base master \
                             --head "$branch_name" || true
          
                echo "Created new PR for $file"
              fi
            fi
          
            # Retourner à la branche master
            git checkout master
          }
          
          # Traiter les fichiers modifiés et nouveaux
          git status --porcelain | while read -r status file; do
            status_code="${status:0:2}"
            
            if [[ "$file" == json/*.json ]] && \
               [[ ! "$file" == *".i18n."* ]] && \
               [[ ! "$file" == *"Presentation.json" ]]; then
              
              if [[ "$status_code" =~ ^(M|A|\?\?)$ ]]; then
                echo "Processing file with status $status_code: $file"
                create_pr "$file"
              fi
            fi
          done

          # Attendre un peu avant de créer les autres PR
          sleep 2
          
          # Groupe PR pour les traductions et présentations
          if ! git diff --quiet HEAD -- json/*.i18n.*.json json/*Presentation.json; then
            # Nettoyer la branche existante
            git branch -D "update-translations-and-presentations" 2>/dev/null || true
            
            # Créer une nouvelle branche
            git checkout -b "update-translations-and-presentations"
            git add json/*.i18n.*.json json/*Presentation.json
            git commit -m "Update translations and presentations"

            # Essayer de synchroniser avec la branche distante
            if git ls-remote --heads origin "update-translations-and-presentations" | grep -q "update-translations-and-presentations"; then
              git fetch origin update-translations-and-presentations:update-translations-and-presentations || true
              git pull origin update-translations-and-presentations --rebase || true
            fi

            # Forcer la mise à jour de la branche
            git push origin "update-translations-and-presentations" --force-with-lease || git push origin "update-translations-and-presentations" --force

            # Créer la PR
            gh pr create --title "Update translations and presentations" \
              --body "Automated update for translation and presentation files." \
              --base master \
              --head "update-translations-and-presentations" || true

            git checkout master
          fi

          # PR pour README.md
          if ! git diff --quiet HEAD -- README.md; then
            # Nettoyer la branche existante
            git branch -D "update-readme" 2>/dev/null || true
            
            # Créer une nouvelle branche
            git checkout -b "update-readme"
            git add README.md
            git commit -m "Update README.md"

            # Forcer la mise à jour de la branche
            git push origin "update-readme" --force-with-lease || git push origin "update-readme" --force

            # Créer la PR
            gh pr create --title "Update README.md" \
              --body "Automated update for README.md" \
              --base master \
              --head "update-readme" || true

            git checkout master
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
